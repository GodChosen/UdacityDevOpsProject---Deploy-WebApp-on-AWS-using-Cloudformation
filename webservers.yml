Description: Created by Osazee Odigie (Udacity-ALX DevOps Project 2)

Parameters:
  EnvName:
    Description: The name is to be used to prefixed to resource names
    Type: String
  WebServerAMI:
    Description: The AMI to be used to launch web servers
    Type: String
  InstanceType:
    Description: The instance type to be used to launch web servers
    Type: String
      
Resources:
  # Security Groups
  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group to allow http access to the web servers
      VpcId:
        Fn::ImportValue: !Sub "${EnvName}-ProjectVPCId"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0
        
  LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group to allow http access to the load balancer
      VpcId:
        Fn::ImportValue: !Sub "${EnvName}-ProjectVPCId"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0

  # S3 Bucket
  AppS3BucketAccessRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
    
  WebServerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Path: "/"
      Roles:
      - Ref: AppS3BucketAccessRole
      
  AppS3BucketsPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: AppS3BucketsPolicy
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action:
          - s3:*
          Resource: "*"
      Roles:
      - Ref: AppS3BucketAccessRole

  # Autoscaling Groups
  WebServerLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo apt-get update -y
          apt-get install unzip awscli -y
          apt-get install apache2 -y
          systemctl start apache2.service
          systemctl enable apache2.service
          cd /var/www/html
          aws s3 cp --recursive s3://udacitydevopsproject2/ .
          
      ImageId: !Ref WebServerAMI 
      IamInstanceProfile: !Ref WebServerInstanceProfile
      SecurityGroups:
      - Ref: WebServerSecGroup
      InstanceType: !Ref InstanceType
      BlockDeviceMappings:
      - DeviceName: "/dev/sdk"
        Ebs:
          VolumeSize: "10"
          
  WebServerAutoScaleGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Fn::ImportValue: !Sub "${EnvName}-PrivateSubnets"
      LaunchConfigurationName:
        Ref: WebServerLaunchConfig
      MinSize: '4'
      MaxSize: '6'
      TargetGroupARNs:
      - Ref: WebServerTargetGroup

  # Load Balancers
  WebServerLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - Fn::ImportValue: !Sub "${EnvName}-PubSubnet1"
      - Fn::ImportValue: !Sub "${EnvName}-PubSubnet2"
      SecurityGroups:
      - Ref: LBSecGroup

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: WebServerTargetGroup
      LoadBalancerArn:
        Ref: WebServerLB
      Port: "80"
      Protocol: HTTP

  ALBListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
        - Type: forward
          TargetGroupArn: !Ref "WebServerTargetGroup"
        Conditions:
        - Field: path-pattern
          Values: [/]
        ListenerArn: !Ref "Listener"
        Priority: 1

  WebServerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: 
        Fn::ImportValue:
          Fn::Sub: "${EnvName}-ProjectVPCId"

Outputs:
  LoadBalancerDNSName: 
    Description: DNS Name of the Load Balancer
    Value: !Join ["", ["http://", !GetAtt WebServerLB.DNSName]]
    Export:
      Name: !Sub ${EnvName}-LoadBalancerDNSName

